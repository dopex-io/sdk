{
  "address": "0x49D2B580D03B5Fb10975DbA6fbfAE8f92350C2E2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ssov",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        }
      ],
      "name": "NewRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountStaked",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalStakedBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "totalRewardsArray",
          "type": "uint256[]"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountUnstaked",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "rewardTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CRV",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CRV_2POOL",
      "outputs": [
        {
          "internalType": "contract ICrv2Pool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CRV_2POOL_GAUGE",
      "outputs": [
        {
          "internalType": "contract ICrv2PoolGauge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CRV_CHILD_GAUGE",
      "outputs": [
        {
          "internalType": "contract ICrvChildGauge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DPX",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "crvRewardsEmitted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "transferNative",
          "type": "bool"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lastTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardsPerEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ssov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "rewardTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "rewardTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "updateRewardsPerEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf5e2ba346387e920c17ad3b0457d23aa018f48bf2ea25b27c7485a4f5c4d4aa7",
  "receipt": {
    "to": null,
    "from": "0xDe485812E28824e542B9c2270B6b8eD9232B7D0b",
    "contractAddress": "0x49D2B580D03B5Fb10975DbA6fbfAE8f92350C2E2",
    "transactionIndex": 1,
    "gasUsed": "3870129",
    "logsBloom": "0x
    "blockHash": "0xaf775f142150f6843ed224b62028945373e25d0b92d4ccfe47ebb9d60b914e4e",
    "transactionHash": "0xf5e2ba346387e920c17ad3b0457d23aa018f48bf2ea25b27c7485a4f5c4d4aa7",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 22834438,
        "transactionHash": "0xf5e2ba346387e920c17ad3b0457d23aa018f48bf2ea25b27c7485a4f5c4d4aa7",
        "address": "0x49D2B580D03B5Fb10975DbA6fbfAE8f92350C2E2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000de485812e28824e542b9c2270b6b8ed9232b7d0b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xaf775f142150f6843ed224b62028945373e25d0b92d4ccfe47ebb9d60b914e4e"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 22834438,
        "transactionHash": "0xf5e2ba346387e920c17ad3b0457d23aa018f48bf2ea25b27c7485a4f5c4d4aa7",
        "address": "0x7f90122BF0700F9E7e1F688fe926940E8839F353",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000049d2b580d03b5fb10975dba6fbfae8f92350c2e2",
          "0x000000000000000000000000ce5f24b7a95e9cba7df4b54e911b4a3dc8cdaf6f"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0xaf775f142150f6843ed224b62028945373e25d0b92d4ccfe47ebb9d60b914e4e"
      }
    ],
    "blockNumber": 22834438,
    "cumulativeGasUsed": "3870129",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7C5aC7E4E352B733CF65721d9Fe28A17Da890159"
  ],
  "numDeployments": 37,
  "solcInputHash": "f060b0d81dfa644b19da1ebdb4c6d8c9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ssov\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"NewRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStakedBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"totalRewardsArray\",\"type\":\"uint256[]\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUnstaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewardTokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CRV\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRV_2POOL\",\"outputs\":[{\"internalType\":\"contract ICrv2Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRV_2POOL_GAUGE\",\"outputs\":[{\"internalType\":\"contract ICrv2PoolGauge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRV_CHILD_GAUGE\",\"outputs\":[{\"internalType\":\"contract ICrvChildGauge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DPX\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"crvRewardsEmitted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"transferNative\",\"type\":\"bool\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardsPerEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ssov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rewardTokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rewardTokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"updateRewardsPerEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"emergencyWithdraw(address[],bool)\":{\"details\":\"Can only be called by the owner\",\"params\":{\"tokens\":\"The list of erc20 tokens to withdraw\",\"transferNative\":\"Whether should transfer the native currency\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Stakes 2CRV into the USDC/USDT Curve 2pool on Arbitrum\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"emergencyWithdraw(address[],bool)\":{\"notice\":\"Transfers all funds to msg.sender\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking-strategies/CurveStakingStrategyV1.sol\":\"CurveStakingStrategyV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/core/ISsovV3.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n// Interfaces\\nimport {IERC721Enumerable} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport {IERC20} from \\\"../external/interfaces/IERC20.sol\\\";\\n\\n// Structs\\nimport {Addresses, EpochData, EpochStrikeData, VaultCheckpoint} from \\\"./SsovV3Structs.sol\\\";\\n\\n/// @title SSOV V3 interface\\ninterface ISsovV3 is IERC721Enumerable {\\n    function isPut() external view returns (bool);\\n\\n    function currentEpoch() external view returns (uint256);\\n\\n    function collateralPrecision() external view returns (uint256);\\n\\n    function addresses() external view returns (Addresses memory);\\n\\n    function collateralToken() external view returns (IERC20);\\n\\n    function deposit(\\n        uint256 strikeIndex,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256 tokenId);\\n\\n    function purchase(\\n        uint256 strikeIndex,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256 premium, uint256 totalFee);\\n\\n    function settle(\\n        uint256 strikeIndex,\\n        uint256 amount,\\n        uint256 epoch,\\n        address to\\n    ) external returns (uint256 pnl);\\n\\n    function withdraw(uint256 tokenId, address to)\\n        external\\n        returns (\\n            uint256 collateralTokenWithdrawAmount,\\n            uint256[] memory rewardTokenWithdrawAmounts\\n        );\\n\\n    function getUnderlyingPrice() external view returns (uint256);\\n\\n    function getCollateralPrice() external view returns (uint256);\\n\\n    function getVolatility(uint256 _strike) external view returns (uint256);\\n\\n    function calculatePremium(\\n        uint256 _strike,\\n        uint256 _amount,\\n        uint256 _expiry\\n    ) external view returns (uint256 premium);\\n\\n    function calculatePnl(\\n        uint256 price,\\n        uint256 strike,\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    function calculatePurchaseFees(uint256 strike, uint256 amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calculateSettlementFees(uint256 pnl)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getEpochTimes(uint256 epoch)\\n        external\\n        view\\n        returns (uint256 start, uint256 end);\\n\\n    function writePosition(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint256 epoch,\\n            uint256 strike,\\n            uint256 collateralAmount,\\n            uint256 checkpointIndex,\\n            uint256[] memory rewardDistributionRatios\\n        );\\n\\n    function getEpochData(uint256 epoch)\\n        external\\n        view\\n        returns (EpochData memory);\\n\\n    function getEpochStrikeData(uint256 epoch, uint256 strike)\\n        external\\n        view\\n        returns (EpochStrikeData memory);\\n\\n    function getEpochStrikeCheckpointsLength(uint256 epoch, uint256 strike)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function checkpoints(\\n        uint256 epoch,\\n        uint256 strike,\\n        uint256 index\\n    ) external view returns (VaultCheckpoint memory);\\n}\\n\",\"keccak256\":\"0x7ef59c1480a323b84ab3b7741d3b259bc3954dab36dc1c48619bc471e042be53\",\"license\":\"UNLICENSED\"},\"contracts/core/SsovV3Structs.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nstruct Addresses {\\n    address feeStrategy;\\n    address stakingStrategy;\\n    address optionPricing;\\n    address priceOracle;\\n    address volatilityOracle;\\n    address feeDistributor;\\n    address optionsTokenImplementation;\\n}\\n\\nstruct EpochData {\\n    bool expired;\\n    uint256 startTime;\\n    uint256 expiry;\\n    uint256 settlementPrice;\\n    uint256 totalCollateralBalance; // Premium + Deposits from all strikes\\n    uint256 collateralExchangeRate; // Exchange rate for collateral to underlying (Only applicable to CALL options)\\n    uint256 settlementCollateralExchangeRate; // Exchange rate for collateral to underlying on settlement (Only applicable to CALL options)\\n    uint256[] strikes;\\n    uint256[] totalRewardsCollected;\\n    uint256[] rewardDistributionRatios;\\n    address[] rewardTokensToDistribute;\\n}\\n\\nstruct EpochStrikeData {\\n    address strikeToken;\\n    uint256 totalCollateral;\\n    uint256 activeCollateral;\\n    uint256 totalPremiums;\\n    uint256 checkpointPointer;\\n    uint256[] rewardStoredForPremiums;\\n    uint256[] rewardDistributionRatiosForPremiums;\\n}\\n\\nstruct VaultCheckpoint {\\n    uint256 activeCollateral;\\n    uint256 totalCollateral;\\n    uint256 accruedPremium;\\n}\\n\\nstruct WritePosition {\\n    uint256 epoch;\\n    uint256 strike;\\n    uint256 collateralAmount;\\n    uint256 checkpointIndex;\\n    uint256[] rewardDistributionRatios;\\n}\\n\",\"keccak256\":\"0x64b866ceffeb5413c394d040f17e43547879697aedd5963a89b5047e6c8c67fc\",\"license\":\"UNLICENSED\"},\"contracts/external/interfaces/ICrv2Pool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\n\\ninterface ICrv2Pool is IERC20 {\\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount)\\n        external\\n        returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_amount\\n    ) external returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x451201bfba531b2fa68d554111e03f6ec1f2e00e38a195280b1f0b0ce9216fe1\",\"license\":\"UNLICENSED\"},\"contracts/external/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n * NOTE: Modified to include symbols and decimals.\\n */\\ninterface IERC20 {\\n  function totalSupply() external view returns (uint256);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x8a99c98bc4e6ba9f3de4745a15ff7828c5ddb08ed2befd62f395e12a6ebf067c\",\"license\":\"UNLICENSED\"},\"contracts/external/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(\\n            value\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\n            value,\\n            \\\"SafeERC20: decreased allowance below zero\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfadec304a9386a36385a8132b07b465aa5fa98dee2b7526ab94424b404316a5d\",\"license\":\"MIT\"},\"contracts/staking-strategies/CurveStakingStrategyV1.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// Libraries\\nimport {SafeERC20} from \\\"../external/libraries/SafeERC20.sol\\\";\\n\\n// Interfaces\\nimport {ISsovV3} from \\\"../core/ISsovV3.sol\\\";\\nimport {IStakingStrategy} from \\\"./IStakingStrategy.sol\\\";\\nimport {IERC20} from \\\"../external/interfaces/IERC20.sol\\\";\\nimport {ICrv2Pool} from \\\"../external/interfaces/ICrv2Pool.sol\\\";\\n\\ninterface ICrv2PoolGauge is IERC20 {\\n    function deposit(\\n        uint256 _value,\\n        address _addr,\\n        bool _claim_rewards\\n    ) external;\\n\\n    function withdraw(\\n        uint256 _value,\\n        address _user,\\n        bool _claim_rewards\\n    ) external;\\n\\n    function claimable_reward_write(address _addr, address _token)\\n        external\\n        returns (uint256);\\n}\\n\\ninterface ICrvChildGauge {\\n    function mint(address _gauge) external;\\n}\\n\\ninterface ISsovV3YieldBooster {\\n    function receiveRewards(\\n        address _ssov,\\n        address[] calldata _tokens,\\n        uint256[] calldata _amounts\\n    ) external;\\n}\\n\\n/// @title Stakes 2CRV into the USDC/USDT Curve 2pool on Arbitrum\\ncontract CurveStakingStrategyV1 is IStakingStrategy, Ownable {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for ICrv2Pool;\\n\\n    mapping(uint256 => uint256) public rewardsPerEpoch;\\n\\n    mapping(uint256 => uint256) public lastTimestamp;\\n\\n    mapping(uint256 => uint256) public crvRewardsEmitted;\\n\\n    ICrv2PoolGauge public constant CRV_2POOL_GAUGE =\\n        ICrv2PoolGauge(0xCE5F24B7A95e9cBa7df4B54E911B4A3Dc8CDAf6f);\\n\\n    ICrvChildGauge public constant CRV_CHILD_GAUGE =\\n        ICrvChildGauge(0xabC000d88f23Bb45525E447528DBF656A9D55bf5);\\n\\n    ICrv2Pool public constant CRV_2POOL =\\n        ICrv2Pool(0x7f90122BF0700F9E7e1F688fe926940E8839F353);\\n\\n    IERC20 public constant CRV =\\n        IERC20(0x11cDb42B0EB46D95f990BeDD4695A6e3fA034978);\\n\\n    IERC20 public constant DPX =\\n        IERC20(0x6C2C06790b3E3E3c38e12Ee22F8183b37a13EE55);\\n\\n    address[] public rewardTokens = new address[](2);\\n\\n    address public immutable ssov;\\n\\n    event NewRewards(uint256 epoch, uint256 rewards);\\n    event EmergencyWithdraw(address sender);\\n\\n    constructor(address _ssov) {\\n        ssov = _ssov;\\n\\n        CRV_2POOL.safeIncreaseAllowance(\\n            address(CRV_2POOL_GAUGE),\\n            type(uint256).max\\n        );\\n\\n        rewardTokens[0] = address(CRV);\\n        rewardTokens[1] = address(DPX);\\n    }\\n\\n    function updateRewardsPerEpoch(uint256 _rewards, uint256 _epoch)\\n        external\\n        onlyOwner\\n    {\\n        rewardsPerEpoch[_epoch] = _rewards;\\n        emit NewRewards(_rewards, _epoch);\\n    }\\n\\n    function getRewardTokens() external view returns (address[] memory) {\\n        return rewardTokens;\\n    }\\n\\n    function _updateCrvRewards(uint256 epoch) internal returns (uint256) {\\n        uint256 crvRewards = CRV.balanceOf(address(this));\\n\\n        CRV_CHILD_GAUGE.mint(address(CRV_2POOL_GAUGE));\\n\\n        crvRewards = CRV.balanceOf(address(this)) - crvRewards;\\n\\n        crvRewardsEmitted[epoch] += crvRewards;\\n\\n        return crvRewardsEmitted[epoch];\\n    }\\n\\n    function stake(uint256 amount)\\n        external\\n        onlySsov(msg.sender)\\n        returns (uint256[] memory rewardTokenAmounts)\\n    {\\n        ISsovV3 _ssov = ISsovV3(ssov);\\n\\n        uint256 epoch = _ssov.currentEpoch();\\n\\n        (uint256 startTime, uint256 expiry) = _ssov.getEpochTimes(epoch);\\n\\n        uint256 rewardRate = rewardsPerEpoch[epoch] / (expiry - startTime);\\n\\n        uint256 rewardsEmitted = rewardRate * (block.timestamp - startTime);\\n\\n        rewardTokenAmounts = new uint256[](2);\\n\\n        rewardTokenAmounts[1] = rewardsEmitted;\\n\\n        // Transfer 2CRV from sender\\n        CRV_2POOL.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        rewardTokenAmounts[0] = _updateCrvRewards(epoch);\\n\\n        // Deposit curve LP to the curve gauge for rewards\\n        CRV_2POOL_GAUGE.deposit(\\n            amount,\\n            address(this),\\n            false /* _claim_rewards */\\n        );\\n\\n        uint256 totalStakedBalance = CRV_2POOL_GAUGE.balanceOf(address(this));\\n\\n        emit Stake(msg.sender, amount, totalStakedBalance, rewardTokenAmounts);\\n    }\\n\\n    function unstake()\\n        external\\n        onlySsov(msg.sender)\\n        returns (uint256[] memory rewardTokenAmounts)\\n    {\\n        ISsovV3 _ssov = ISsovV3(ssov);\\n\\n        uint256 epoch = _ssov.currentEpoch();\\n\\n        uint256 balance = CRV_2POOL_GAUGE.balanceOf(address(this));\\n\\n        // Withdraw curve LP from the curve gauge and claim rewards\\n        CRV_2POOL_GAUGE.withdraw(\\n            balance,\\n            address(this),\\n            false /* _claim_rewards */\\n        );\\n\\n        uint256 rewards = _updateCrvRewards(epoch);\\n\\n        CRV.safeTransfer(msg.sender, rewards);\\n\\n        CRV_2POOL.safeTransfer(msg.sender, balance);\\n\\n        rewardTokenAmounts = new uint256[](2);\\n\\n        rewardTokenAmounts[0] = rewards;\\n\\n        rewardTokenAmounts[1] = rewardsPerEpoch[epoch];\\n\\n        IERC20(rewardTokens[1]).safeTransfer(\\n            msg.sender,\\n            rewardsPerEpoch[epoch]\\n        );\\n\\n        emit Unstake(msg.sender, balance, rewardTokenAmounts);\\n    }\\n\\n    /// @notice Transfers all funds to msg.sender\\n    /// @dev Can only be called by the owner\\n    /// @param tokens The list of erc20 tokens to withdraw\\n    /// @param transferNative Whether should transfer the native currency\\n    function emergencyWithdraw(address[] calldata tokens, bool transferNative)\\n        external\\n        onlyOwner\\n    {\\n        if (transferNative) payable(msg.sender).transfer(address(this).balance);\\n\\n        IERC20 token;\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            token = IERC20(tokens[i]);\\n            token.safeTransfer(msg.sender, token.balanceOf(address(this)));\\n        }\\n\\n        emit EmergencyWithdraw(msg.sender);\\n    }\\n\\n    modifier onlySsov(address _sender) {\\n        require(_sender == ssov, \\\"Sender must be the ssov\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x75bc3ac4c08459f022083fd665651ee7d7a3e67121018c07274a6622ffc5a1c3\",\"license\":\"UNLICENSED\"},\"contracts/staking-strategies/IStakingStrategy.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IStakingStrategy {\\n    function stake(uint256) external returns (uint256[] memory);\\n\\n    function unstake() external returns (uint256[] memory);\\n\\n    function getRewardTokens() external view returns (address[] memory);\\n\\n    event Stake(\\n        address sender,\\n        uint256 amountStaked,\\n        uint256 totalStakedBalance,\\n        uint256[] totalRewardsArray\\n    );\\n\\n    event Unstake(\\n        address sender,\\n        uint256 amountUnstaked,\\n        uint256[] rewardTokenAmounts\\n    );\\n}\\n\",\"keccak256\":\"0xed09175dd868e3097c5c34e23adcbaaf572f0d739cfc858a6a12c4d4a86c3e84\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x600260a08181526101006040529081602001602082028036833750508151620000309260049250602001906200054e565b503480156200003e57600080fd5b5060405162001d3438038062001d348339810160408190526200006191620005cf565b6200006c3362000177565b6001600160a01b038116608052620000bc737f90122bf0700f9e7e1f688fe926940e8839f35373ce5f24b7a95e9cba7df4b54e911b4a3dc8cdaf6f600019620001c7602090811b62000c4d17901c565b7311cdb42b0eb46d95f990bedd4695a6e3fa0349786004600081548110620000e857620000e8620005fa565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550736c2c06790b3e3e3c38e12ee22f8183b37a13ee556004600181548110620001425762000142620005fa565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555050620006e9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091620002599184919087169063dd62ed3e90604401602060405180830381865afa1580156200021f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000245919062000610565b620002bb60201b62000d391790919060201c565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152919250620002b591869190620002d216565b50505050565b6000620002c982846200062a565b90505b92915050565b60006200032e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316620003b960201b62000d4e179092919060201c565b805190915015620003b457808060200190518101906200034f91906200064c565b620003b45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b505050565b6060620003ca8484600085620003d4565b90505b9392505050565b606082471015620004375760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401620003ab565b6001600160a01b0385163b620004905760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401620003ab565b600080866001600160a01b03168587604051620004ae919062000696565b60006040518083038185875af1925050503d8060008114620004ed576040519150601f19603f3d011682016040523d82523d6000602084013e620004f2565b606091505b5090925090506200050582828662000510565b979650505050505050565b6060831562000521575081620003cd565b825115620005325782518084602001fd5b8160405162461bcd60e51b8152600401620003ab9190620006b4565b828054828255906000526020600020908101928215620005a6579160200282015b82811115620005a657825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906200056f565b50620005b4929150620005b8565b5090565b5b80821115620005b45760008155600101620005b9565b600060208284031215620005e257600080fd5b81516001600160a01b0381168114620003cd57600080fd5b634e487b7160e01b600052603260045260246000fd5b6000602082840312156200062357600080fd5b5051919050565b80820180821115620002cc57634e487b7160e01b600052601160045260246000fd5b6000602082840312156200065f57600080fd5b81518015158114620003cd57600080fd5b60005b838110156200068d57818101518382015260200162000673565b50506000910152565b60008251620006aa81846020870162000670565b9190910192915050565b6020815260008251806020840152620006d581604085016020870162000670565b601f01601f19169190910160400192915050565b60805161161362000721600039600081816101de01528181610305015281816103760152818161080f015261087b01526116136000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063945c9142116100a2578063c4f59f9b11610071578063c4f59f9b1461027f578063d5068d0414610294578063e843d52c146102af578063f2fde38b146102ca578063fb4c124f146102dd57600080fd5b8063945c91421461021157806394cee7b31461022c578063964914fa1461024c578063a694fc3a1461026c57600080fd5b8063715018a6116100e9578063715018a6146101ab5780637bb7bed1146101b35780637c4b52cb146101c65780638355fc54146101d95780638da5cb5b1461020057600080fd5b80632b34bbaa1461011b5780632def6620146101535780632e5eb29d14610168578063336874181461017d575b600080fd5b610136737f90122bf0700f9e7e1f688fe926940e8839f35381565b6040516001600160a01b0390911681526020015b60405180910390f35b61015b6102f8565b60405161014a91906112a5565b61017b6101763660046112b8565b610630565b005b61019d61018b3660046112da565b60026020526000908152604090205481565b60405190815260200161014a565b61017b610687565b6101366101c13660046112da565b61069b565b61017b6101d4366004611301565b6106c5565b6101367f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b0316610136565b6101367311cdb42b0eb46d95f990bedd4695a6e3fa03497881565b61019d61023a3660046112da565b60016020526000908152604090205481565b61019d61025a3660046112da565b60036020526000908152604090205481565b61015b61027a3660046112da565b610802565b610287610b72565b60405161014a9190611387565b610136736c2c06790b3e3e3c38e12ee22f8183b37a13ee5581565b61013673abc000d88f23bb45525e447528dbf656a9d55bf581565b61017b6102d83660046113d4565b610bd4565b61013673ce5f24b7a95e9cba7df4b54e911b4a3dc8cdaf6f81565b6060336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001681146103725760405162461bcd60e51b815260206004820152601760248201527629b2b73232b91036bab9ba103132903a34329039b9b7bb60491b60448201526064015b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000090506000816001600160a01b031663766718086040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fb91906113fd565b6040516370a0823160e01b815230600482015290915060009073ce5f24b7a95e9cba7df4b54e911b4a3dc8cdaf6f906370a0823190602401602060405180830381865afa158015610450573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047491906113fd565b60405162ebf5dd60e01b8152600481018290523060248201526000604482015290915073ce5f24b7a95e9cba7df4b54e911b4a3dc8cdaf6f9062ebf5dd90606401600060405180830381600087803b1580156104cf57600080fd5b505af11580156104e3573d6000803e3d6000fd5b5050505060006104f283610d67565b90506105137311cdb42b0eb46d95f990bedd4695a6e3fa0349783383610f17565b610532737f90122bf0700f9e7e1f688fe926940e8839f3533384610f17565b6040805160028082526060820183529091602083019080368337019050509550808660008151811061056657610566611416565b60200260200101818152505060016000848152602001908152602001600020548660018151811061059957610599611416565b6020026020010181815250506105ed33600160008681526020019081526020016000205460046001815481106105d1576105d1611416565b6000918252602090912001546001600160a01b03169190610f17565b7fe69f2c813fbacdba640c6e65761e2d4b772375f2fbe475137078d3ed850aff573383886040516106209392919061142c565b60405180910390a1505050505090565b610638610f4c565b60008181526001602090815260409182902084905581518481529081018390527fb86e3e3978dde9fa5d4008534601be74ce40793f554fbc842b08631e20c61c95910160405180910390a15050565b61068f610f4c565b6106996000610fa6565b565b600481815481106106ab57600080fd5b6000918252602090912001546001600160a01b0316905081565b6106cd610f4c565b80156107015760405133904780156108fc02916000818181858888f193505050501580156106ff573d6000803e3d6000fd5b505b6000805b838110156107c85784848281811061071f5761071f611416565b905060200201602081019061073491906113d4565b6040516370a0823160e01b81523060048201529092506107b69033906001600160a01b038516906370a0823190602401602060405180830381865afa158015610781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a591906113fd565b6001600160a01b0385169190610f17565b806107c081611472565b915050610705565b506040513381527f5e7b34819cd91b239220bec92fcfd3c10da2214ba13e4e2b1f6c9cfdbd68a9a29060200160405180910390a150505050565b6060336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001681146108775760405162461bcd60e51b815260206004820152601760248201527629b2b73232b91036bab9ba103132903a34329039b9b7bb60491b6044820152606401610369565b60007f000000000000000000000000000000000000000000000000000000000000000090506000816001600160a01b031663766718086040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090091906113fd565b9050600080836001600160a01b0316636f56f56f846040518263ffffffff1660e01b815260040161093391815260200190565b6040805180830381865afa15801561094f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610973919061148b565b9092509050600061098483836114af565b60008581526001602052604090205461099d91906114c2565b905060006109ab84426114af565b6109b590836114e4565b604080516002808252606082018352929350919060208301908036833701905050975080886001815181106109ec576109ec611416565b6020908102919091010152610a17737f90122bf0700f9e7e1f688fe926940e8839f35333308c610ff6565b610a2085610d67565b88600081518110610a3357610a33611416565b60209081029190910101526040516383df674760e01b8152600481018a90523060248201526000604482015273ce5f24b7a95e9cba7df4b54e911b4a3dc8cdaf6f906383df674790606401600060405180830381600087803b158015610a9857600080fd5b505af1158015610aac573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201526000925073ce5f24b7a95e9cba7df4b54e911b4a3dc8cdaf6f91506370a0823190602401602060405180830381865afa158015610b02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2691906113fd565b90507ff129b07eb5effb6c354173bcbbef6ef8cbe16ba22a3207394dcd8e39314c3d39338b838c604051610b5d9493929190611503565b60405180910390a15050505050505050919050565b60606004805480602002602001604051908101604052809291908181526020018280548015610bca57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610bac575b5050505050905090565b610bdc610f4c565b6001600160a01b038116610c415760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610369565b610c4a81610fa6565b50565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091610ccd9184919087169063dd62ed3e90604401602060405180830381865afa158015610ca3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc791906113fd565b90610d39565b6040516001600160a01b038516602482015260448101829052909150610d3390859063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261102e565b50505050565b6000610d45828461153a565b90505b92915050565b6060610d5d8484600085611100565b90505b9392505050565b6040516370a0823160e01b815230600482015260009081907311cdb42b0eb46d95f990bedd4695a6e3fa034978906370a0823190602401602060405180830381865afa158015610dbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddf91906113fd565b6040516335313c2160e11b815273ce5f24b7a95e9cba7df4b54e911b4a3dc8cdaf6f600482015290915073abc000d88f23bb45525e447528dbf656a9d55bf590636a62784290602401600060405180830381600087803b158015610e4257600080fd5b505af1158015610e56573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201528392507311cdb42b0eb46d95f990bedd4695a6e3fa03497891506370a0823190602401602060405180830381865afa158015610eab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ecf91906113fd565b610ed991906114af565b905080600360008581526020019081526020016000206000828254610efe919061153a565b9091555050506000918252506003602052604090205490565b6040516001600160a01b038316602482015260448101829052610f4790849063a9059cbb60e01b90606401610cfc565b505050565b6000546001600160a01b031633146106995760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610369565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052610d339085906323b872dd60e01b90608401610cfc565b6000611083826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610d4e9092919063ffffffff16565b805190915015610f4757808060200190518101906110a1919061154d565b610f475760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610369565b6060824710156111615760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610369565b6001600160a01b0385163b6111b85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610369565b600080866001600160a01b031685876040516111d4919061158e565b60006040518083038185875af1925050503d8060008114611211576040519150601f19603f3d011682016040523d82523d6000602084013e611216565b606091505b5091509150611226828286611231565b979650505050505050565b60608315611240575081610d60565b8251156112505782518084602001fd5b8160405162461bcd60e51b815260040161036991906115aa565b600081518084526020808501945080840160005b8381101561129a5781518752958201959082019060010161127e565b509495945050505050565b602081526000610d45602083018461126a565b600080604083850312156112cb57600080fd5b50508035926020909101359150565b6000602082840312156112ec57600080fd5b5035919050565b8015158114610c4a57600080fd5b60008060006040848603121561131657600080fd5b833567ffffffffffffffff8082111561132e57600080fd5b818601915086601f83011261134257600080fd5b81358181111561135157600080fd5b8760208260051b850101111561136657600080fd5b6020928301955093505084013561137c816112f3565b809150509250925092565b6020808252825182820181905260009190848201906040850190845b818110156113c85783516001600160a01b0316835292840192918401916001016113a3565b50909695505050505050565b6000602082840312156113e657600080fd5b81356001600160a01b0381168114610d6057600080fd5b60006020828403121561140f57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60018060a01b0384168152826020820152606060408201526000611453606083018461126a565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b6000600182016114845761148461145c565b5060010190565b6000806040838503121561149e57600080fd5b505080516020909101519092909150565b81810381811115610d4857610d4861145c565b6000826114df57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156114fe576114fe61145c565b500290565b60018060a01b0385168152836020820152826040820152608060608201526000611530608083018461126a565b9695505050505050565b80820180821115610d4857610d4861145c565b60006020828403121561155f57600080fd5b8151610d60816112f3565b60005b8381101561158557818101518382015260200161156d565b50506000910152565b600082516115a081846020870161156a565b9190910192915050565b60208152600082518060208401526115c981604085016020870161156a565b601f01601f1916919091016040019291505056fea2646970667358221220637892b9b197d1415eeb8d5dd7683bb86d6a5f628c6b9d53d188ad8604f78d6a64736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c8063945c9142116100a2578063c4f59f9b11610071578063c4f59f9b1461027f578063d5068d0414610294578063e843d52c146102af578063f2fde38b146102ca578063fb4c124f146102dd57600080fd5b8063945c91421461021157806394cee7b31461022c578063964914fa1461024c578063a694fc3a1461026c57600080fd5b8063715018a6116100e9578063715018a6146101ab5780637bb7bed1146101b35780637c4b52cb146101c65780638355fc54146101d95780638da5cb5b1461020057600080fd5b80632b34bbaa1461011b5780632def6620146101535780632e5eb29d14610168578063336874181461017d575b600080fd5b610136737f90122bf0700f9e7e1f688fe926940e8839f35381565b6040516001600160a01b0390911681526020015b60405180910390f35b61015b6102f8565b60405161014a91906112a5565b61017b6101763660046112b8565b610630565b005b61019d61018b3660046112da565b60026020526000908152604090205481565b60405190815260200161014a565b61017b610687565b6101366101c13660046112da565b61069b565b61017b6101d4366004611301565b6106c5565b6101367f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b0316610136565b6101367311cdb42b0eb46d95f990bedd4695a6e3fa03497881565b61019d61023a3660046112da565b60016020526000908152604090205481565b61019d61025a3660046112da565b60036020526000908152604090205481565b61015b61027a3660046112da565b610802565b610287610b72565b60405161014a9190611387565b610136736c2c06790b3e3e3c38e12ee22f8183b37a13ee5581565b61013673abc000d88f23bb45525e447528dbf656a9d55bf581565b61017b6102d83660046113d4565b610bd4565b61013673ce5f24b7a95e9cba7df4b54e911b4a3dc8cdaf6f81565b6060336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001681146103725760405162461bcd60e51b815260206004820152601760248201527629b2b73232b91036bab9ba103132903a34329039b9b7bb60491b60448201526064015b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000090506000816001600160a01b031663766718086040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fb91906113fd565b6040516370a0823160e01b815230600482015290915060009073ce5f24b7a95e9cba7df4b54e911b4a3dc8cdaf6f906370a0823190602401602060405180830381865afa158015610450573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047491906113fd565b60405162ebf5dd60e01b8152600481018290523060248201526000604482015290915073ce5f24b7a95e9cba7df4b54e911b4a3dc8cdaf6f9062ebf5dd90606401600060405180830381600087803b1580156104cf57600080fd5b505af11580156104e3573d6000803e3d6000fd5b5050505060006104f283610d67565b90506105137311cdb42b0eb46d95f990bedd4695a6e3fa0349783383610f17565b610532737f90122bf0700f9e7e1f688fe926940e8839f3533384610f17565b6040805160028082526060820183529091602083019080368337019050509550808660008151811061056657610566611416565b60200260200101818152505060016000848152602001908152602001600020548660018151811061059957610599611416565b6020026020010181815250506105ed33600160008681526020019081526020016000205460046001815481106105d1576105d1611416565b6000918252602090912001546001600160a01b03169190610f17565b7fe69f2c813fbacdba640c6e65761e2d4b772375f2fbe475137078d3ed850aff573383886040516106209392919061142c565b60405180910390a1505050505090565b610638610f4c565b60008181526001602090815260409182902084905581518481529081018390527fb86e3e3978dde9fa5d4008534601be74ce40793f554fbc842b08631e20c61c95910160405180910390a15050565b61068f610f4c565b6106996000610fa6565b565b600481815481106106ab57600080fd5b6000918252602090912001546001600160a01b0316905081565b6106cd610f4c565b80156107015760405133904780156108fc02916000818181858888f193505050501580156106ff573d6000803e3d6000fd5b505b6000805b838110156107c85784848281811061071f5761071f611416565b905060200201602081019061073491906113d4565b6040516370a0823160e01b81523060048201529092506107b69033906001600160a01b038516906370a0823190602401602060405180830381865afa158015610781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a591906113fd565b6001600160a01b0385169190610f17565b806107c081611472565b915050610705565b506040513381527f5e7b34819cd91b239220bec92fcfd3c10da2214ba13e4e2b1f6c9cfdbd68a9a29060200160405180910390a150505050565b6060336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001681146108775760405162461bcd60e51b815260206004820152601760248201527629b2b73232b91036bab9ba103132903a34329039b9b7bb60491b6044820152606401610369565b60007f000000000000000000000000000000000000000000000000000000000000000090506000816001600160a01b031663766718086040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090091906113fd565b9050600080836001600160a01b0316636f56f56f846040518263ffffffff1660e01b815260040161093391815260200190565b6040805180830381865afa15801561094f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610973919061148b565b9092509050600061098483836114af565b60008581526001602052604090205461099d91906114c2565b905060006109ab84426114af565b6109b590836114e4565b604080516002808252606082018352929350919060208301908036833701905050975080886001815181106109ec576109ec611416565b6020908102919091010152610a17737f90122bf0700f9e7e1f688fe926940e8839f35333308c610ff6565b610a2085610d67565b88600081518110610a3357610a33611416565b60209081029190910101526040516383df674760e01b8152600481018a90523060248201526000604482015273ce5f24b7a95e9cba7df4b54e911b4a3dc8cdaf6f906383df674790606401600060405180830381600087803b158015610a9857600080fd5b505af1158015610aac573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201526000925073ce5f24b7a95e9cba7df4b54e911b4a3dc8cdaf6f91506370a0823190602401602060405180830381865afa158015610b02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2691906113fd565b90507ff129b07eb5effb6c354173bcbbef6ef8cbe16ba22a3207394dcd8e39314c3d39338b838c604051610b5d9493929190611503565b60405180910390a15050505050505050919050565b60606004805480602002602001604051908101604052809291908181526020018280548015610bca57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610bac575b5050505050905090565b610bdc610f4c565b6001600160a01b038116610c415760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610369565b610c4a81610fa6565b50565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091610ccd9184919087169063dd62ed3e90604401602060405180830381865afa158015610ca3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc791906113fd565b90610d39565b6040516001600160a01b038516602482015260448101829052909150610d3390859063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261102e565b50505050565b6000610d45828461153a565b90505b92915050565b6060610d5d8484600085611100565b90505b9392505050565b6040516370a0823160e01b815230600482015260009081907311cdb42b0eb46d95f990bedd4695a6e3fa034978906370a0823190602401602060405180830381865afa158015610dbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddf91906113fd565b6040516335313c2160e11b815273ce5f24b7a95e9cba7df4b54e911b4a3dc8cdaf6f600482015290915073abc000d88f23bb45525e447528dbf656a9d55bf590636a62784290602401600060405180830381600087803b158015610e4257600080fd5b505af1158015610e56573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201528392507311cdb42b0eb46d95f990bedd4695a6e3fa03497891506370a0823190602401602060405180830381865afa158015610eab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ecf91906113fd565b610ed991906114af565b905080600360008581526020019081526020016000206000828254610efe919061153a565b9091555050506000918252506003602052604090205490565b6040516001600160a01b038316602482015260448101829052610f4790849063a9059cbb60e01b90606401610cfc565b505050565b6000546001600160a01b031633146106995760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610369565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052610d339085906323b872dd60e01b90608401610cfc565b6000611083826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610d4e9092919063ffffffff16565b805190915015610f4757808060200190518101906110a1919061154d565b610f475760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610369565b6060824710156111615760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610369565b6001600160a01b0385163b6111b85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610369565b600080866001600160a01b031685876040516111d4919061158e565b60006040518083038185875af1925050503d8060008114611211576040519150601f19603f3d011682016040523d82523d6000602084013e611216565b606091505b5091509150611226828286611231565b979650505050505050565b60608315611240575081610d60565b8251156112505782518084602001fd5b8160405162461bcd60e51b815260040161036991906115aa565b600081518084526020808501945080840160005b8381101561129a5781518752958201959082019060010161127e565b509495945050505050565b602081526000610d45602083018461126a565b600080604083850312156112cb57600080fd5b50508035926020909101359150565b6000602082840312156112ec57600080fd5b5035919050565b8015158114610c4a57600080fd5b60008060006040848603121561131657600080fd5b833567ffffffffffffffff8082111561132e57600080fd5b818601915086601f83011261134257600080fd5b81358181111561135157600080fd5b8760208260051b850101111561136657600080fd5b6020928301955093505084013561137c816112f3565b809150509250925092565b6020808252825182820181905260009190848201906040850190845b818110156113c85783516001600160a01b0316835292840192918401916001016113a3565b50909695505050505050565b6000602082840312156113e657600080fd5b81356001600160a01b0381168114610d6057600080fd5b60006020828403121561140f57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60018060a01b0384168152826020820152606060408201526000611453606083018461126a565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b6000600182016114845761148461145c565b5060010190565b6000806040838503121561149e57600080fd5b505080516020909101519092909150565b81810381811115610d4857610d4861145c565b6000826114df57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156114fe576114fe61145c565b500290565b60018060a01b0385168152836020820152826040820152608060608201526000611530608083018461126a565b9695505050505050565b80820180821115610d4857610d4861145c565b60006020828403121561155f57600080fd5b8151610d60816112f3565b60005b8381101561158557818101518382015260200161156d565b50506000910152565b600082516115a081846020870161156a565b9190910192915050565b60208152600082518060208401526115c981604085016020870161156a565b601f01601f1916919091016040019291505056fea2646970667358221220637892b9b197d1415eeb8d5dd7683bb86d6a5f628c6b9d53d188ad8604f78d6a64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "emergencyWithdraw(address[],bool)": {
        "details": "Can only be called by the owner",
        "params": {
          "tokens": "The list of erc20 tokens to withdraw",
          "transferNative": "Whether should transfer the native currency"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Stakes 2CRV into the USDC/USDT Curve 2pool on Arbitrum",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "emergencyWithdraw(address[],bool)": {
        "notice": "Transfers all funds to msg.sender"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3739,
        "contract": "contracts/staking-strategies/CurveStakingStrategyV1.sol:CurveStakingStrategyV1",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 16327,
        "contract": "contracts/staking-strategies/CurveStakingStrategyV1.sol:CurveStakingStrategyV1",
        "label": "rewardsPerEpoch",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 16331,
        "contract": "contracts/staking-strategies/CurveStakingStrategyV1.sol:CurveStakingStrategyV1",
        "label": "lastTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 16335,
        "contract": "contracts/staking-strategies/CurveStakingStrategyV1.sol:CurveStakingStrategyV1",
        "label": "crvRewardsEmitted",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 16373,
        "contract": "contracts/staking-strategies/CurveStakingStrategyV1.sol:CurveStakingStrategyV1",
        "label": "rewardTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
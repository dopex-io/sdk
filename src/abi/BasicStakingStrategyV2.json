{
  "address": "0xb277Fc0AC7e86c4c5d4C542296C3519E6eb99A2A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ssov",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_rewardTokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "rewards",
          "type": "uint256[]"
        }
      ],
      "name": "NewRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountStaked",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalStakedBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "totalRewardsArray",
          "type": "uint256[]"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountUnstaked",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "rewardTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "transferNative",
          "type": "bool"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lastTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardsPerEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ssov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "rewardTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "rewardTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_rewards",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "updateRewardsPerEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x30857338eb7cfad93ce2f37094db18520d8e87d08a86ea452e388dc2a09610b4",
  "receipt": {
    "to": null,
    "from": "0xDe485812E28824e542B9c2270B6b8eD9232B7D0b",
    "contractAddress": "0xb277Fc0AC7e86c4c5d4C542296C3519E6eb99A2A",
    "transactionIndex": 1,
    "gasUsed": "2648147",
    "logsBloom": "0x
    "blockHash": "0xfbec7b13e53472bd7d85be46f429d1f1b2382e332b4aaf04b9babacdb9aff22b",
    "transactionHash": "0x30857338eb7cfad93ce2f37094db18520d8e87d08a86ea452e388dc2a09610b4",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 22941571,
        "transactionHash": "0x30857338eb7cfad93ce2f37094db18520d8e87d08a86ea452e388dc2a09610b4",
        "address": "0xb277Fc0AC7e86c4c5d4C542296C3519E6eb99A2A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000de485812e28824e542b9c2270b6b8ed9232b7d0b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xfbec7b13e53472bd7d85be46f429d1f1b2382e332b4aaf04b9babacdb9aff22b"
      }
    ],
    "blockNumber": 22941571,
    "cumulativeGasUsed": "2648147",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCdaACF37726Bf1017821b5169e22EB34734B28A8",
    [
      "0x32eb7902d4134bf98a28b963d26de779af92a212",
      "0x10393c20975cF177a3513071bC110f7962CD67da"
    ]
  ],
  "numDeployments": 3,
  "solcInputHash": "8e5f318c6571b8ba40247dfdec1932a9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ssov\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"name\":\"NewRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStakedBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"totalRewardsArray\",\"type\":\"uint256[]\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUnstaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewardTokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"transferNative\",\"type\":\"bool\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardsPerEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ssov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rewardTokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rewardTokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_rewards\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"updateRewardsPerEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"emergencyWithdraw(address[],bool)\":{\"details\":\"Can only be called by the owner\",\"params\":{\"tokens\":\"The list of erc20 tokens to withdraw\",\"transferNative\":\"Whether should transfer the native currency\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"emergencyWithdraw(address[],bool)\":{\"notice\":\"Transfers all funds to msg.sender\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking-strategies/BasicStakingStrategyV2.sol\":\"BasicStakingStrategyV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/core/ISsovV3.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n// Interfaces\\nimport {IERC721Enumerable} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport {IERC20} from \\\"../external/interfaces/IERC20.sol\\\";\\n\\n// Structs\\nimport {Addresses, EpochData, EpochStrikeData, VaultCheckpoint} from \\\"./SsovV3Structs.sol\\\";\\n\\n/// @title SSOV V3 interface\\ninterface ISsovV3 is IERC721Enumerable {\\n    function isPut() external view returns (bool);\\n\\n    function currentEpoch() external view returns (uint256);\\n\\n    function collateralPrecision() external view returns (uint256);\\n\\n    function addresses() external view returns (Addresses memory);\\n\\n    function collateralToken() external view returns (IERC20);\\n\\n    function deposit(\\n        uint256 strikeIndex,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256 tokenId);\\n\\n    function purchase(\\n        uint256 strikeIndex,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256 premium, uint256 totalFee);\\n\\n    function settle(\\n        uint256 strikeIndex,\\n        uint256 amount,\\n        uint256 epoch,\\n        address to\\n    ) external returns (uint256 pnl);\\n\\n    function withdraw(uint256 tokenId, address to)\\n        external\\n        returns (\\n            uint256 collateralTokenWithdrawAmount,\\n            uint256[] memory rewardTokenWithdrawAmounts\\n        );\\n\\n    function getUnderlyingPrice() external view returns (uint256);\\n\\n    function getCollateralPrice() external view returns (uint256);\\n\\n    function getVolatility(uint256 _strike) external view returns (uint256);\\n\\n    function calculatePremium(\\n        uint256 _strike,\\n        uint256 _amount,\\n        uint256 _expiry\\n    ) external view returns (uint256 premium);\\n\\n    function calculatePnl(\\n        uint256 price,\\n        uint256 strike,\\n        uint256 amount,\\n        uint256 collateralExchangeRate\\n    ) external view returns (uint256);\\n\\n    function calculatePurchaseFees(uint256 strike, uint256 amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calculateSettlementFees(uint256 pnl)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getEpochTimes(uint256 epoch)\\n        external\\n        view\\n        returns (uint256 start, uint256 end);\\n\\n    function writePosition(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint256 epoch,\\n            uint256 strike,\\n            uint256 collateralAmount,\\n            uint256 checkpointIndex,\\n            uint256[] memory rewardDistributionRatios\\n        );\\n\\n    function getEpochData(uint256 epoch)\\n        external\\n        view\\n        returns (EpochData memory);\\n\\n    function getEpochStrikeData(uint256 epoch, uint256 strike)\\n        external\\n        view\\n        returns (EpochStrikeData memory);\\n\\n    function getEpochStrikeCheckpointsLength(uint256 epoch, uint256 strike)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function checkpoints(\\n        uint256 epoch,\\n        uint256 strike,\\n        uint256 index\\n    ) external view returns (VaultCheckpoint memory);\\n}\\n\",\"keccak256\":\"0xdc79f221e815657a16730ac4883c4182f64123dd40d12dd3cb7121dc268e9c66\",\"license\":\"UNLICENSED\"},\"contracts/core/SsovV3Structs.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nstruct Addresses {\\n    address feeStrategy;\\n    address stakingStrategy;\\n    address optionPricing;\\n    address priceOracle;\\n    address volatilityOracle;\\n    address feeDistributor;\\n    address optionsTokenImplementation;\\n}\\n\\nstruct EpochData {\\n    bool expired;\\n    uint256 startTime;\\n    uint256 expiry;\\n    uint256 settlementPrice;\\n    uint256 totalCollateralBalance; // Premium + Deposits from all strikes\\n    uint256 collateralExchangeRate; // Exchange rate for collateral to underlying (Only applicable to CALL options)\\n    uint256 settlementCollateralExchangeRate; // Exchange rate for collateral to underlying on settlement (Only applicable to CALL options)\\n    uint256[] strikes;\\n    uint256[] totalRewardsCollected;\\n    uint256[] rewardDistributionRatios;\\n    address[] rewardTokensToDistribute;\\n}\\n\\nstruct EpochStrikeData {\\n    address strikeToken;\\n    uint256 totalCollateral;\\n    uint256 activeCollateral;\\n    uint256 totalPremiums;\\n    uint256 checkpointPointer;\\n    uint256[] rewardStoredForPremiums;\\n    uint256[] rewardDistributionRatiosForPremiums;\\n}\\n\\nstruct VaultCheckpoint {\\n    uint256 activeCollateral;\\n    uint256 totalCollateral;\\n    uint256 accruedPremium;\\n}\\n\\nstruct WritePosition {\\n    uint256 epoch;\\n    uint256 strike;\\n    uint256 collateralAmount;\\n    uint256 checkpointIndex;\\n    uint256[] rewardDistributionRatios;\\n}\\n\",\"keccak256\":\"0x64b866ceffeb5413c394d040f17e43547879697aedd5963a89b5047e6c8c67fc\",\"license\":\"UNLICENSED\"},\"contracts/external/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n * NOTE: Modified to include symbols and decimals.\\n */\\ninterface IERC20 {\\n  function totalSupply() external view returns (uint256);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x8a99c98bc4e6ba9f3de4745a15ff7828c5ddb08ed2befd62f395e12a6ebf067c\",\"license\":\"UNLICENSED\"},\"contracts/external/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(\\n            value\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\n            value,\\n            \\\"SafeERC20: decreased allowance below zero\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfadec304a9386a36385a8132b07b465aa5fa98dee2b7526ab94424b404316a5d\",\"license\":\"MIT\"},\"contracts/staking-strategies/BasicStakingStrategyV2.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// Libraries\\nimport {SafeERC20} from \\\"../external/libraries/SafeERC20.sol\\\";\\n\\n// Interfaces\\nimport {ISsovV3} from \\\"../core/ISsovV3.sol\\\";\\nimport {IStakingStrategy} from \\\"./IStakingStrategy.sol\\\";\\nimport {IERC20} from \\\"../external/interfaces/IERC20.sol\\\";\\n\\ncontract BasicStakingStrategyV2 is IStakingStrategy, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    mapping(uint256 => uint256[]) public rewardsPerEpoch;\\n\\n    mapping(uint256 => uint256) public lastTimestamp;\\n\\n    uint256 public balance;\\n\\n    address[] public rewardTokens;\\n\\n    address public immutable ssov;\\n\\n    event NewRewards(uint256 epoch, uint256[] rewards);\\n\\n    event EmergencyWithdraw(address sender);\\n\\n    constructor(address _ssov, address[] memory _rewardTokens) {\\n        ssov = _ssov;\\n        rewardTokens = _rewardTokens;\\n    }\\n\\n    function updateRewardsPerEpoch(uint256[] memory _rewards, uint256 _epoch)\\n        external\\n        onlyOwner\\n    {\\n        rewardsPerEpoch[_epoch] = _rewards;\\n        emit NewRewards(_epoch, _rewards);\\n    }\\n\\n    function getRewardTokens() external view returns (address[] memory) {\\n        return rewardTokens;\\n    }\\n\\n    function stake(uint256 amount)\\n        external\\n        onlySsov(msg.sender)\\n        returns (uint256[] memory rewardTokenAmounts)\\n    {\\n        ISsovV3 _ssov = ISsovV3(ssov);\\n\\n        uint256 epoch = _ssov.currentEpoch();\\n\\n        (uint256 startTime, uint256 expiry) = _ssov.getEpochTimes(epoch);\\n\\n        uint256 rewardTokenLengths = rewardTokens.length;\\n\\n        rewardTokenAmounts = new uint256[](rewardTokenLengths);\\n\\n        for (uint256 i; i < rewardTokenLengths; ) {\\n            rewardTokenAmounts[i] =\\n                (rewardsPerEpoch[epoch][i] / (expiry - startTime)) *\\n                (block.timestamp - startTime);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        balance += amount;\\n\\n        emit Stake(msg.sender, amount, balance, rewardTokenAmounts);\\n    }\\n\\n    function unstake()\\n        external\\n        onlySsov(msg.sender)\\n        returns (uint256[] memory rewardTokenAmounts)\\n    {\\n        ISsovV3 _ssov = ISsovV3(ssov);\\n\\n        uint256 epoch = _ssov.currentEpoch();\\n\\n        uint256 rewardTokenLengths = rewardTokens.length;\\n\\n        rewardTokenAmounts = new uint256[](rewardTokenLengths);\\n\\n        for (uint256 i; i < rewardTokenLengths; ) {\\n            rewardTokenAmounts[i] = rewardsPerEpoch[epoch][i];\\n\\n            IERC20(rewardTokens[i]).safeTransfer(\\n                msg.sender,\\n                rewardsPerEpoch[epoch][i]\\n            );\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit Unstake(msg.sender, balance, rewardTokenAmounts);\\n    }\\n\\n    /// @notice Transfers all funds to msg.sender\\n    /// @dev Can only be called by the owner\\n    /// @param tokens The list of erc20 tokens to withdraw\\n    /// @param transferNative Whether should transfer the native currency\\n    function emergencyWithdraw(address[] calldata tokens, bool transferNative)\\n        external\\n        onlyOwner\\n    {\\n        if (transferNative) payable(msg.sender).transfer(address(this).balance);\\n\\n        IERC20 token;\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            token = IERC20(tokens[i]);\\n            token.safeTransfer(msg.sender, token.balanceOf(address(this)));\\n        }\\n\\n        emit EmergencyWithdraw(msg.sender);\\n    }\\n\\n    modifier onlySsov(address _sender) {\\n        require(_sender == ssov, \\\"Sender must be the ssov\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xb44c0e770d427208fef74bc0609aa058f01b3509af4caa49af1ffc786f466b5d\",\"license\":\"UNLICENSED\"},\"contracts/staking-strategies/IStakingStrategy.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IStakingStrategy {\\n    function stake(uint256) external returns (uint256[] memory);\\n\\n    function unstake() external returns (uint256[] memory);\\n\\n    function getRewardTokens() external view returns (address[] memory);\\n\\n    event Stake(\\n        address sender,\\n        uint256 amountStaked,\\n        uint256 totalStakedBalance,\\n        uint256[] totalRewardsArray\\n    );\\n\\n    event Unstake(\\n        address sender,\\n        uint256 amountUnstaked,\\n        uint256[] rewardTokenAmounts\\n    );\\n}\\n\",\"keccak256\":\"0xed09175dd868e3097c5c34e23adcbaaf572f0d739cfc858a6a12c4d4a86c3e84\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620014d1380380620014d183398101604081905262000034916200016e565b6200003f336200006a565b6001600160a01b038216608052805162000061906004906020840190620000ba565b50505062000257565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b82805482825590600052602060002090810192821562000112579160200282015b828111156200011257825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620000db565b506200012092915062000124565b5090565b5b8082111562000120576000815560010162000125565b80516001600160a01b03811681146200015357600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200018257600080fd5b6200018d836200013b565b602084810151919350906001600160401b0380821115620001ad57600080fd5b818601915086601f830112620001c257600080fd5b815181811115620001d757620001d762000158565b8060051b604051601f19603f83011681018181108582111715620001ff57620001ff62000158565b6040529182528482019250838101850191898311156200021e57600080fd5b938501935b82851015620002475762000237856200013b565b8452938501939285019262000223565b8096505050505050509250929050565b6080516112426200028f6000396000818161016d0152818161021701528181610288015281816105e3015261064f01526112426000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063c4f59f9b11610066578063c4f59f9b146101bc578063da6ca69f146101d1578063dfc0be2c146101e4578063f2fde38b146101f757600080fd5b80638da5cb5b1461018f578063a694fc3a146101a0578063b69ef8a8146101b357600080fd5b80632def6620146100d457806333687418146100f2578063715018a6146101205780637bb7bed11461012a5780637c4b52cb146101555780638355fc5414610168575b600080fd5b6100dc61020a565b6040516100e99190610ddb565b60405180910390f35b610112610100366004610dee565b60026020526000908152604090205481565b6040519081526020016100e9565b61012861045b565b005b61013d610138366004610dee565b61046f565b6040516001600160a01b0390911681526020016100e9565b610128610163366004610e15565b610499565b61013d7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031661013d565b6100dc6101ae366004610dee565b6105d6565b61011260035481565b6101c4610879565b6040516100e99190610e9b565b6101126101df366004610ee8565b6108db565b6101286101f2366004610f20565b61090c565b610128610205366004610fe4565b610971565b6060336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001681146102845760405162461bcd60e51b815260206004820152601760248201527629b2b73232b91036bab9ba103132903a34329039b9b7bb60491b60448201526064015b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000090506000816001600160a01b031663766718086040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030d919061100d565b6004549091508067ffffffffffffffff81111561032c5761032c610f0a565b604051908082528060200260200182016040528015610355578160200160208202803683370190505b50945060005b8181101561041657600083815260016020526040902080548290811061038357610383611026565b90600052602060002001548682815181106103a0576103a0611026565b60200260200101818152505061040e336001600086815260200190815260200160002083815481106103d4576103d4611026565b9060005260206000200154600484815481106103f2576103f2611026565b6000918252602090912001546001600160a01b031691906109ea565b60010161035b565b507fe69f2c813fbacdba640c6e65761e2d4b772375f2fbe475137078d3ed850aff57336003548760405161044c9392919061103c565b60405180910390a15050505090565b610463610a41565b61046d6000610a9b565b565b6004818154811061047f57600080fd5b6000918252602090912001546001600160a01b0316905081565b6104a1610a41565b80156104d55760405133904780156108fc02916000818181858888f193505050501580156104d3573d6000803e3d6000fd5b505b6000805b8381101561059c578484828181106104f3576104f3611026565b90506020020160208101906105089190610fe4565b6040516370a0823160e01b815230600482015290925061058a9033906001600160a01b038516906370a0823190602401602060405180830381865afa158015610555573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610579919061100d565b6001600160a01b03851691906109ea565b8061059481611082565b9150506104d9565b506040513381527f5e7b34819cd91b239220bec92fcfd3c10da2214ba13e4e2b1f6c9cfdbd68a9a29060200160405180910390a150505050565b6060336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016811461064b5760405162461bcd60e51b815260206004820152601760248201527629b2b73232b91036bab9ba103132903a34329039b9b7bb60491b604482015260640161027b565b60007f000000000000000000000000000000000000000000000000000000000000000090506000816001600160a01b031663766718086040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d4919061100d565b9050600080836001600160a01b0316636f56f56f846040518263ffffffff1660e01b815260040161070791815260200190565b6040805180830381865afa158015610723573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610747919061109b565b60045491935091508067ffffffffffffffff81111561076857610768610f0a565b604051908082528060200260200182016040528015610791578160200160208202803683370190505b50965060005b81811015610817576107a984426110bf565b6107b385856110bf565b60008781526001602052604090208054849081106107d3576107d3611026565b90600052602060002001546107e891906110d8565b6107f291906110fa565b88828151811061080457610804611026565b6020908102919091010152600101610797565b50876003600082825461082a9190611119565b90915550506003546040517ff129b07eb5effb6c354173bcbbef6ef8cbe16ba22a3207394dcd8e39314c3d39916108669133918c918c9061112c565b60405180910390a1505050505050919050565b606060048054806020026020016040519081016040528092919081815260200182805480156108d157602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116108b3575b5050505050905090565b600160205281600052604060002081815481106108f757600080fd5b90600052602060002001600091509150505481565b610914610a41565b6000818152600160209081526040909120835161093392850190610d40565b507ff9383cc26255a2a5f99c3fcc895fce2e26af48ed0b8529067ace5ff3348a4cfe8183604051610965929190611163565b60405180910390a15050565b610979610a41565b6001600160a01b0381166109de5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161027b565b6109e781610a9b565b50565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610a3c908490610aeb565b505050565b6000546001600160a01b0316331461046d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161027b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610b40826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610bbd9092919063ffffffff16565b805190915015610a3c5780806020019051810190610b5e919061117c565b610a3c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161027b565b6060610bcc8484600085610bd6565b90505b9392505050565b606082471015610c375760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161027b565b6001600160a01b0385163b610c8e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161027b565b600080866001600160a01b03168587604051610caa91906111bd565b60006040518083038185875af1925050503d8060008114610ce7576040519150601f19603f3d011682016040523d82523d6000602084013e610cec565b606091505b5091509150610cfc828286610d07565b979650505050505050565b60608315610d16575081610bcf565b825115610d265782518084602001fd5b8160405162461bcd60e51b815260040161027b91906111d9565b828054828255906000526020600020908101928215610d7b579160200282015b82811115610d7b578251825591602001919060010190610d60565b50610d87929150610d8b565b5090565b5b80821115610d875760008155600101610d8c565b600081518084526020808501945080840160005b83811015610dd057815187529582019590820190600101610db4565b509495945050505050565b602081526000610bcf6020830184610da0565b600060208284031215610e0057600080fd5b5035919050565b80151581146109e757600080fd5b600080600060408486031215610e2a57600080fd5b833567ffffffffffffffff80821115610e4257600080fd5b818601915086601f830112610e5657600080fd5b813581811115610e6557600080fd5b8760208260051b8501011115610e7a57600080fd5b60209283019550935050840135610e9081610e07565b809150509250925092565b6020808252825182820181905260009190848201906040850190845b81811015610edc5783516001600160a01b031683529284019291840191600101610eb7565b50909695505050505050565b60008060408385031215610efb57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215610f3357600080fd5b823567ffffffffffffffff80821115610f4b57600080fd5b818501915085601f830112610f5f57600080fd5b8135602082821115610f7357610f73610f0a565b8160051b604051601f19603f83011681018181108682111715610f9857610f98610f0a565b604052928352818301935084810182019289841115610fb657600080fd5b948201945b83861015610fd457853585529482019493820193610fbb565b9997909101359750505050505050565b600060208284031215610ff657600080fd5b81356001600160a01b0381168114610bcf57600080fd5b60006020828403121561101f57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60018060a01b03841681528260208201526060604082015260006110636060830184610da0565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b6000600182016110945761109461106c565b5060010190565b600080604083850312156110ae57600080fd5b505080516020909101519092909150565b818103818111156110d2576110d261106c565b92915050565b6000826110f557634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156111145761111461106c565b500290565b808201808211156110d2576110d261106c565b60018060a01b03851681528360208201528260408201526080606082015260006111596080830184610da0565b9695505050505050565b828152604060208201526000610bcc6040830184610da0565b60006020828403121561118e57600080fd5b8151610bcf81610e07565b60005b838110156111b457818101518382015260200161119c565b50506000910152565b600082516111cf818460208701611199565b9190910192915050565b60208152600082518060208401526111f8816040850160208701611199565b601f01601f1916919091016040019291505056fea2646970667358221220e73bcdf95f60dfde096841a78090a703739a2526698138094324f07f7e182aef64736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063c4f59f9b11610066578063c4f59f9b146101bc578063da6ca69f146101d1578063dfc0be2c146101e4578063f2fde38b146101f757600080fd5b80638da5cb5b1461018f578063a694fc3a146101a0578063b69ef8a8146101b357600080fd5b80632def6620146100d457806333687418146100f2578063715018a6146101205780637bb7bed11461012a5780637c4b52cb146101555780638355fc5414610168575b600080fd5b6100dc61020a565b6040516100e99190610ddb565b60405180910390f35b610112610100366004610dee565b60026020526000908152604090205481565b6040519081526020016100e9565b61012861045b565b005b61013d610138366004610dee565b61046f565b6040516001600160a01b0390911681526020016100e9565b610128610163366004610e15565b610499565b61013d7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031661013d565b6100dc6101ae366004610dee565b6105d6565b61011260035481565b6101c4610879565b6040516100e99190610e9b565b6101126101df366004610ee8565b6108db565b6101286101f2366004610f20565b61090c565b610128610205366004610fe4565b610971565b6060336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001681146102845760405162461bcd60e51b815260206004820152601760248201527629b2b73232b91036bab9ba103132903a34329039b9b7bb60491b60448201526064015b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000090506000816001600160a01b031663766718086040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030d919061100d565b6004549091508067ffffffffffffffff81111561032c5761032c610f0a565b604051908082528060200260200182016040528015610355578160200160208202803683370190505b50945060005b8181101561041657600083815260016020526040902080548290811061038357610383611026565b90600052602060002001548682815181106103a0576103a0611026565b60200260200101818152505061040e336001600086815260200190815260200160002083815481106103d4576103d4611026565b9060005260206000200154600484815481106103f2576103f2611026565b6000918252602090912001546001600160a01b031691906109ea565b60010161035b565b507fe69f2c813fbacdba640c6e65761e2d4b772375f2fbe475137078d3ed850aff57336003548760405161044c9392919061103c565b60405180910390a15050505090565b610463610a41565b61046d6000610a9b565b565b6004818154811061047f57600080fd5b6000918252602090912001546001600160a01b0316905081565b6104a1610a41565b80156104d55760405133904780156108fc02916000818181858888f193505050501580156104d3573d6000803e3d6000fd5b505b6000805b8381101561059c578484828181106104f3576104f3611026565b90506020020160208101906105089190610fe4565b6040516370a0823160e01b815230600482015290925061058a9033906001600160a01b038516906370a0823190602401602060405180830381865afa158015610555573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610579919061100d565b6001600160a01b03851691906109ea565b8061059481611082565b9150506104d9565b506040513381527f5e7b34819cd91b239220bec92fcfd3c10da2214ba13e4e2b1f6c9cfdbd68a9a29060200160405180910390a150505050565b6060336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016811461064b5760405162461bcd60e51b815260206004820152601760248201527629b2b73232b91036bab9ba103132903a34329039b9b7bb60491b604482015260640161027b565b60007f000000000000000000000000000000000000000000000000000000000000000090506000816001600160a01b031663766718086040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d4919061100d565b9050600080836001600160a01b0316636f56f56f846040518263ffffffff1660e01b815260040161070791815260200190565b6040805180830381865afa158015610723573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610747919061109b565b60045491935091508067ffffffffffffffff81111561076857610768610f0a565b604051908082528060200260200182016040528015610791578160200160208202803683370190505b50965060005b81811015610817576107a984426110bf565b6107b385856110bf565b60008781526001602052604090208054849081106107d3576107d3611026565b90600052602060002001546107e891906110d8565b6107f291906110fa565b88828151811061080457610804611026565b6020908102919091010152600101610797565b50876003600082825461082a9190611119565b90915550506003546040517ff129b07eb5effb6c354173bcbbef6ef8cbe16ba22a3207394dcd8e39314c3d39916108669133918c918c9061112c565b60405180910390a1505050505050919050565b606060048054806020026020016040519081016040528092919081815260200182805480156108d157602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116108b3575b5050505050905090565b600160205281600052604060002081815481106108f757600080fd5b90600052602060002001600091509150505481565b610914610a41565b6000818152600160209081526040909120835161093392850190610d40565b507ff9383cc26255a2a5f99c3fcc895fce2e26af48ed0b8529067ace5ff3348a4cfe8183604051610965929190611163565b60405180910390a15050565b610979610a41565b6001600160a01b0381166109de5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161027b565b6109e781610a9b565b50565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610a3c908490610aeb565b505050565b6000546001600160a01b0316331461046d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161027b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610b40826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610bbd9092919063ffffffff16565b805190915015610a3c5780806020019051810190610b5e919061117c565b610a3c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161027b565b6060610bcc8484600085610bd6565b90505b9392505050565b606082471015610c375760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161027b565b6001600160a01b0385163b610c8e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161027b565b600080866001600160a01b03168587604051610caa91906111bd565b60006040518083038185875af1925050503d8060008114610ce7576040519150601f19603f3d011682016040523d82523d6000602084013e610cec565b606091505b5091509150610cfc828286610d07565b979650505050505050565b60608315610d16575081610bcf565b825115610d265782518084602001fd5b8160405162461bcd60e51b815260040161027b91906111d9565b828054828255906000526020600020908101928215610d7b579160200282015b82811115610d7b578251825591602001919060010190610d60565b50610d87929150610d8b565b5090565b5b80821115610d875760008155600101610d8c565b600081518084526020808501945080840160005b83811015610dd057815187529582019590820190600101610db4565b509495945050505050565b602081526000610bcf6020830184610da0565b600060208284031215610e0057600080fd5b5035919050565b80151581146109e757600080fd5b600080600060408486031215610e2a57600080fd5b833567ffffffffffffffff80821115610e4257600080fd5b818601915086601f830112610e5657600080fd5b813581811115610e6557600080fd5b8760208260051b8501011115610e7a57600080fd5b60209283019550935050840135610e9081610e07565b809150509250925092565b6020808252825182820181905260009190848201906040850190845b81811015610edc5783516001600160a01b031683529284019291840191600101610eb7565b50909695505050505050565b60008060408385031215610efb57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215610f3357600080fd5b823567ffffffffffffffff80821115610f4b57600080fd5b818501915085601f830112610f5f57600080fd5b8135602082821115610f7357610f73610f0a565b8160051b604051601f19603f83011681018181108682111715610f9857610f98610f0a565b604052928352818301935084810182019289841115610fb657600080fd5b948201945b83861015610fd457853585529482019493820193610fbb565b9997909101359750505050505050565b600060208284031215610ff657600080fd5b81356001600160a01b0381168114610bcf57600080fd5b60006020828403121561101f57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60018060a01b03841681528260208201526060604082015260006110636060830184610da0565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b6000600182016110945761109461106c565b5060010190565b600080604083850312156110ae57600080fd5b505080516020909101519092909150565b818103818111156110d2576110d261106c565b92915050565b6000826110f557634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156111145761111461106c565b500290565b808201808211156110d2576110d261106c565b60018060a01b03851681528360208201528260408201526080606082015260006111596080830184610da0565b9695505050505050565b828152604060208201526000610bcc6040830184610da0565b60006020828403121561118e57600080fd5b8151610bcf81610e07565b60005b838110156111b457818101518382015260200161119c565b50506000910152565b600082516111cf818460208701611199565b9190910192915050565b60208152600082518060208401526111f8816040850160208701611199565b601f01601f1916919091016040019291505056fea2646970667358221220e73bcdf95f60dfde096841a78090a703739a2526698138094324f07f7e182aef64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "emergencyWithdraw(address[],bool)": {
        "details": "Can only be called by the owner",
        "params": {
          "tokens": "The list of erc20 tokens to withdraw",
          "transferNative": "Whether should transfer the native currency"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "emergencyWithdraw(address[],bool)": {
        "notice": "Transfers all funds to msg.sender"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3739,
        "contract": "contracts/staking-strategies/BasicStakingStrategyV2.sol:BasicStakingStrategyV2",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 15966,
        "contract": "contracts/staking-strategies/BasicStakingStrategyV2.sol:BasicStakingStrategyV2",
        "label": "rewardsPerEpoch",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 15970,
        "contract": "contracts/staking-strategies/BasicStakingStrategyV2.sol:BasicStakingStrategyV2",
        "label": "lastTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 15972,
        "contract": "contracts/staking-strategies/BasicStakingStrategyV2.sol:BasicStakingStrategyV2",
        "label": "balance",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 15975,
        "contract": "contracts/staking-strategies/BasicStakingStrategyV2.sol:BasicStakingStrategyV2",
        "label": "rewardTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}